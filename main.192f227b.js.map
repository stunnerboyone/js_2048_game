{"version":3,"sources":["scripts/main.js"],"names":["board","button","document","querySelector","startMessage","scoreText","field","winMessage","loseMessage","score","cellsInRow","filterZero","row","filter","num","compareFields","prevBoard","boards","JSON","stringify","slide","newRow","i","length","splice","push","hasEmptyCell","r","c","renderField","rows","cells","className","classList","add","textContent","spawnRandomCell","found","Math","floor","random","transponseField","currentField","transponsedBoard","map","_","colIndex","moveLeft","transponsedField","moveRight","reverse","moveUp","newField","moveDown","winGame","j","checkFields","fieldToCheck","gameOver","boardToCheck","newDesk","addEventListener","contains","remove","e","parse","key"],"mappings":";AAAA,aAGA,IAOIA,EAPEC,EAASC,SAASC,cAAc,WAChCC,EAAeF,SAASC,cAAc,kBACtCE,EAAYH,SAASC,cAAc,eACnCG,EAAQJ,SAASC,cAAc,eAC/BI,EAAaL,SAASC,cAAc,gBACpCK,EAAcN,SAASC,cAAc,iBAGvCM,EAAQ,EACNC,EAAa,EAEbC,EAAa,SAACC,GACXA,OAAAA,EAAIC,OAAO,SAAAC,GAAOA,OAAQ,IAARA,KAGrBC,EAAgB,SAACC,EAAWC,GACzBC,OAAAA,KAAKC,UAAUH,KAAeE,KAAKC,UAAUF,IAGhDG,EAAQ,SAACR,GAGR,IAFCS,IAAAA,EAASV,EAAWC,GAEjBU,EAAI,EAAGA,EAAID,EAAOE,OAAS,EAAGD,IACjCD,EAAOC,KAAOD,EAAOC,EAAI,KAC3BD,EAAOC,IAAM,EACbD,EAAOG,OAAOF,EAAI,EAAG,GACrBb,GAASY,EAAOC,IAIbD,KAAAA,EAAOE,OAASb,GACrBW,EAAOI,KAAK,GAGPJ,OAAAA,GAGHK,EAAe,WACd,IAAA,IAAIC,EAAI,EAAGA,EAAIjB,EAAYiB,IACzB,IAAA,IAAIC,EAAI,EAAGA,EAAIlB,EAAYkB,IAC1B5B,GAAgB,IAAhBA,EAAM2B,GAAGC,GACJ,OAAA,EAKN,OAAA,GAGHC,EAAc,WACb,IAAA,IAAIF,EAAI,EAAGA,EAAIjB,EAAYiB,IACzB,IAAA,IAAIC,EAAI,EAAGA,EAAIlB,EAAYkB,IAC9BtB,EAAMwB,KAAKH,GAAGI,MAAMH,GAAGI,UAAY,GAEnC1B,EAAMwB,KAAKH,GAAGI,MAAMH,GAAGK,UAAUC,IAC/B,aACelC,eAAAA,OAAAA,EAAM2B,GAAGC,KAE1BtB,EAAMwB,KAAKH,GAAGI,MAAMH,GAAGO,YAAcnC,EAAM2B,GAAGC,IAAM,IAKpDQ,EAAkB,WAClB,GAACV,IAME,IAFHW,IAAAA,GAAQ,GAEJA,GAAO,CACPV,IAAAA,EAAIW,KAAKC,MAAMD,KAAKE,SAAW9B,GAC/BkB,EAAIU,KAAKC,MAAMD,KAAKE,SAAW9B,GAEjB,IAAhBV,EAAM2B,GAAGC,KACX5B,EAAM2B,GAAGC,GAAK,EACdC,IAEAQ,GAAQ,KAKRI,EAAkB,SAACC,GACnBC,IAAAA,EAAmBD,EAQhBC,OANPA,EAAmBA,EAAiB,GAAGC,IACrC,SAACC,EAAGC,GAAaH,OAAAA,EAAiBC,IAChC,SAAAhC,GAAOA,OAAAA,EAAIkC,QAOXC,EAAW,WACV,IADWC,IAAAA,EAAmBhD,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,EAC1B2B,EAAI,EAAGA,EAAIjB,EAAYiB,IAAK,CAC/Bf,IAAAA,EAAMoC,EAAiBrB,GAE3Bf,EAAMQ,EAAMR,GACZoC,EAAiBrB,GAAKf,IAIpBqC,EAAY,WACX,IADYD,IAAAA,EAAmBhD,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,EAC3B2B,EAAI,EAAGA,EAAIjB,EAAYiB,IAAK,CAC/Bf,IAAAA,EAAMoC,EAAiBrB,GAAGuB,UAE9BtC,EAAMQ,EAAMR,GACZoC,EAAiBrB,GAAKf,EAAIsC,YAIxBC,EAAS,WACPC,IAAAA,EAAWX,EAAgBzC,GAEjC+C,EAASK,GAETpD,EAAQyC,EAAgBW,IAGpBC,EAAW,WACTD,IAAAA,EAAWX,EAAgBzC,GAEjCiD,EAAUG,GAEVpD,EAAQyC,EAAgBW,IAGpBE,EAAU,WACT,IAAA,IAAIhC,EAAI,EAAGA,EAAItB,EAAM,GAAGuB,OAAQD,IAC9B,IAAA,IAAIiC,EAAI,EAAGA,EAAIvD,EAAMuB,OAAQgC,IAC5BvD,GAAgB,OAAhBA,EAAMsB,GAAGiC,GACJ,OAAA,GAMTC,EAAc,SAACC,GACd,IAAA,IAAInC,EAAI,EAAGA,EAAIZ,EAAYY,IACzB,IAAA,IAAIiC,EAAI,EAAGA,EAAI7C,EAAa,EAAG6C,IAC9BE,GAAAA,EAAanC,GAAGiC,KAAOE,EAAanC,GAAGiC,EAAI,GACtC,OAAA,EAKN,OAAA,GAGHG,EAAW,SAACC,GACZjC,GAAAA,IACK,OAAA,EAGHkC,IAAAA,EAAUnB,EAAgBkB,GAE5BH,OAAAA,EAAYG,KAAiBH,EAAYI,IAO/C3D,EAAO4D,iBAAiB,QAAS,WAC3B5D,EAAOgC,UAAU6B,SAAS,UAC5B7D,EAAOgC,UAAU8B,OAAO,SACxB9D,EAAOgC,UAAUC,IAAI,WACrBjC,EAAOkC,YAAc,UACrB/B,EAAa6B,UAAUC,IAAI,YAE3B3B,EAAW0B,UAAUC,IAAI,UACzB1B,EAAYyB,UAAUC,IAAI,WAG5BlC,EAAQ,CACN,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZS,EAAQ,EACRJ,EAAU8B,YAAc1B,EAExB2B,IACAA,MAGFlC,SAAS2D,iBAAiB,UAAW,SAACG,GAKhCV,GAJAI,EAAS1D,IACXQ,EAAYyB,UAAU8B,OAAO,UAG3BT,IACF/C,EAAW0B,UAAU8B,OAAO,UAE5B/D,EAAQ,CACN,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ6B,QACK,CACCb,IAAAA,EAAYE,KAAK+C,MAAM/C,KAAKC,UAAUnB,IAEpCgE,OAAAA,EAAEE,KACH,IAAA,YACHnB,IACA,MAEG,IAAA,aACHE,IACA,MAEG,IAAA,UACHE,IACA,MAEG,IAAA,YACHE,IAIAtC,EAAcC,EAAWhB,IAC3BoC,IAGFP,IAGFxB,EAAU8B,YAAc1B","file":"main.192f227b.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n// Constants\nconst button = document.querySelector('.button');\nconst startMessage = document.querySelector('.message-start');\nconst scoreText = document.querySelector('.game-score');\nconst field = document.querySelector('.game-field');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nlet board;\nlet score = 0;\nconst cellsInRow = 4;\n\nconst filterZero = (row) => {\n  return row.filter(num => num !== 0);\n};\n\nconst compareFields = (prevBoard, boards) => {\n  return JSON.stringify(prevBoard) !== JSON.stringify(boards);\n};\n\nconst slide = (row) => {\n  const newRow = filterZero(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow.splice(i + 1, 1);\n      score += newRow[i];\n    }\n  }\n\n  while (newRow.length < cellsInRow) {\n    newRow.push(0);\n  }\n\n  return newRow;\n};\n\nconst hasEmptyCell = () => {\n  for (let r = 0; r < cellsInRow; r++) {\n    for (let c = 0; c < cellsInRow; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst renderField = () => {\n  for (let r = 0; r < cellsInRow; r++) {\n    for (let c = 0; c < cellsInRow; c++) {\n      field.rows[r].cells[c].className = '';\n\n      field.rows[r].cells[c].classList.add(\n        'field-cell',\n        `field-cell--${board[r][c]}`\n      );\n      field.rows[r].cells[c].textContent = board[r][c] || '';\n    }\n  }\n};\n\nconst spawnRandomCell = () => {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * cellsInRow);\n    const c = Math.floor(Math.random() * cellsInRow);\n\n    if (board[r][c] === 0) {\n      board[r][c] = 2;\n      renderField();\n\n      found = true;\n    }\n  }\n};\n\nconst transponseField = (currentField) => {\n  let transponsedBoard = currentField;\n\n  transponsedBoard = transponsedBoard[0].map(\n    (_, colIndex) => transponsedBoard.map(\n      row => row[colIndex]\n    )\n  );\n\n  return transponsedBoard;\n};\n\nconst moveLeft = (transponsedField = board) => {\n  for (let r = 0; r < cellsInRow; r++) {\n    let row = transponsedField[r];\n\n    row = slide(row);\n    transponsedField[r] = row;\n  };\n};\n\nconst moveRight = (transponsedField = board) => {\n  for (let r = 0; r < cellsInRow; r++) {\n    let row = transponsedField[r].reverse();\n\n    row = slide(row);\n    transponsedField[r] = row.reverse();\n  };\n};\n\nconst moveUp = () => {\n  const newField = transponseField(board);\n\n  moveLeft(newField);\n\n  board = transponseField(newField);\n};\n\nconst moveDown = () => {\n  const newField = transponseField(board);\n\n  moveRight(newField);\n\n  board = transponseField(newField);\n};\n\nconst winGame = () => {\n  for (let i = 0; i < board[0].length; i++) {\n    for (let j = 0; j < board.length; j++) {\n      if (board[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n};\n\nconst checkFields = (fieldToCheck) => {\n  for (let i = 0; i < cellsInRow; i++) {\n    for (let j = 0; j < cellsInRow - 1; j++) {\n      if (fieldToCheck[i][j] === fieldToCheck[i][j + 1]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst gameOver = (boardToCheck) => {\n  if (hasEmptyCell()) {\n    return false;\n  }\n\n  const newDesk = transponseField(boardToCheck);\n\n  if (checkFields(boardToCheck) || checkFields(newDesk)) {\n    return false;\n  };\n\n  return true;\n};\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n  } else {\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n  };\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n  scoreText.textContent = score;\n\n  spawnRandomCell();\n  spawnRandomCell();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (gameOver(board)) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  if (winGame()) {\n    winMessage.classList.remove('hidden');\n\n    board = [\n      [2, 0, 4, 8],\n      [2, 0, 4, 8],\n      [2, 0, 4, 8],\n      [2, 0, 4, 8],\n    ];\n\n    renderField();\n  } else {\n    const prevBoard = JSON.parse(JSON.stringify(board));\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        moveLeft();\n        break;\n\n      case 'ArrowRight':\n        moveRight();\n        break;\n\n      case 'ArrowUp':\n        moveUp();\n        break;\n\n      case 'ArrowDown':\n        moveDown();\n        break;\n    }\n\n    if (compareFields(prevBoard, board)) {\n      spawnRandomCell();\n    }\n\n    renderField();\n  }\n\n  scoreText.textContent = score;\n});\n"]}